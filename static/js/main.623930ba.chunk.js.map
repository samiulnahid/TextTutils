{"version":3,"sources":["component/navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","modeText","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","charAt","slice","split","map","currentValue","join","document","getElementById","select","navigator","clipboard","writeText","set","Set","size","length","defaultProps","aboutText","Alert","alert","word","lower","capitalize","msg","App","setMode","setModeText","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.623930ba.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n        <div className=\"container-fluid\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n                {/* <a className=\"nav-link\" href=\"#\">{props.aboutText}</a> */}\r\n              {/* </li> */}\r\n             \r\n             \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n\r\n            {/* //// light / dark korar jonne. input ar maje onClick use kora hoise\r\n            /// className ar vitor {} and `` use kora hoise jeno js code likha jai  */}\r\n            <div className={`form-check form-switch mx-2 text-${props.mode === 'light' ? 'dark': 'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.modeText} darkMode</label>\r\n            </div>\r\n\r\n             \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\n//propTypes props a jsob perameter asbe ta strict ki type ar hobe ta akhane bola hoise..onno type ar hole error asbe. \r\n//ata deoya hoise muloto oi type e cai amr atar jonne. jodi amr sob doroner type holeo problem hobe na ta hole ata use korbo na\r\n\r\nNavbar.propTypes = {\r\n                    title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired\r\n                }\r\n\r\n// props pass jodi na kore hoi ta hole default vabe ai value nibe\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Default title here',\r\n  aboutText:'Default about text here'\r\n};","import React,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n      const [text, setText] = useState(\"Enter text here\");\r\n    //   const [isUpperCase, setIsUpperCase] = useState(false);\r\n    //   console.log(\"text: \", text);\r\n    // //   console.log(\"settext: \", setText);\r\n    //   setText(\"new text\")\r\n    //   console.log(\"text: \", text);\r\n    // //   console.log(\"settext: \", setText);\r\n\r\n    const handleUpClick = () =>{\r\n        // console.log(\"UPPERCASE was CLICKS\");\r\n\r\n        // if(isUpperCase){\r\n            // let newText = text.toLowerCase();\r\n            // setText(newText)\r\n            // setIsUpperCase(false)\r\n\r\n        // }\r\n        // else{\r\n            let newText = text.toUpperCase();\r\n            setText(newText)\r\n            // setIsUpperCase(true)\r\n\r\n        // }\r\n          props.showAlert(\"converted to upper Case\" , \"success\")\r\n\r\n        \r\n    }\r\n     const handleLowClick = () =>{\r\n        \r\n            let newText = text.toLowerCase();\r\n            setText(newText)\r\n              props.showAlert(\"converted to lower Case\" , \"success\")\r\n    \r\n        \r\n    }\r\n    const handleCapFirstLetterClick = () =>{\r\n\r\n        let firstchar = text.charAt(0); // storing the first char of the string\r\n        let newText= firstchar.toUpperCase(); // converting that to uppercase\r\n        setText(newText+text.slice(1)); // printing it with rest excluding the first char by using slice\r\n\r\n          \r\n\r\n            props.showAlert(\"converted to capitalize first letter from all sentence\" , \"success\")\r\n        \r\n        // setText(newTEXT)\r\n        \r\n    }\r\n\r\n      const handleClearText = () =>{\r\n        \r\n        setText(\"\")\r\n          props.showAlert(\"seccessfully clean all text\" , \"success\")\r\n    }\r\n\r\n\r\n    //cap korle word ar first letter\r\n    const handleCapClick = () =>{\r\n\r\n            //     let CapitalizeWords = text[0].toUpperCase();  \r\n            //     for (let i = 1; i <= text.length - 1; i++) {  \r\n            //         let currentCharacter,  previousCharacter = text[i - 1];  \r\n            //         if (previousCharacter === ' ') {  \r\n            //             currentCharacter = text[i].toUpperCase();  \r\n            //         } else {  \r\n            //             currentCharacter = text[i];  \r\n            //         }  \r\n            //         CapitalizeWords = CapitalizeWords + currentCharacter;  \r\n            //     }  \r\n            //  setText(CapitalizeWords);\r\n\r\n\r\n            let newText = text.split(\" \").map((currentValue) => {\r\n                let newText = currentValue[0].toUpperCase() + currentValue.slice(1);\r\n                return newText;\r\n            });\r\n           setText(newText.join(\" \"));\r\n\r\n             props.showAlert(\"converted to capitalized first letter from every Individual word\" , \"success\")\r\n        \r\n    }\r\n\r\n    /// copy text\r\n    const COPYIT=(event)=>{\r\n\r\n        // ///ata copy korle copy button a click korar pore input / textarea faka hoi a jabe..mane sob text sathe sathe clear hoi a jabe. \r\n\r\n        //     setText(event.target.value);\r\n        //     let newtext=navigator.clipboard.writeText(text);\r\n        //     console.log(newtext);\r\n        //     alert(\"text copied successfully\");\r\n\r\n\r\n            // /// another way\r\n            ///   ///ata copy korle copy button a click korar pore input / textarea faka hoi a jabe na..mane textarea vitor j likha silo ta thakbei and oi likha copy o hobe.\r\n\r\n            let text = document.getElementById(\"myBox\");\r\n            text.select();\r\n            navigator.clipboard.writeText(text.value)\r\n\r\n            props.showAlert(\"successfully copyed all text\" , \"success\")\r\n          \r\n    };\r\n\r\n\r\n    \r\n    const clickUniqueWords=() => {\r\n        let set = new Set(text.split(' '));\r\n        setText(text + '\\nNo. of unique words :'+set.size);\r\n\r\n        props.showAlert(\"find all number of unique word\" , \"success\")\r\n    }\r\n\r\n\r\n    //// remove extra spaces\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ] +/)\r\n        setText(newText.join(\" \"))\r\n\r\n        props.showAlert(\"successfully removed all extra space\" , \"success\")\r\n    }\r\n\r\n\r\n    ///kono kisu type korar sathe sathe handleOnChange ar madhome text ar value protinioto type onujaiyi change hote thaker setText ar madhome\r\n    const handleOnChange = (event) =>{\r\n\r\n        // console.log(\"on change\");\r\n        setText(event.target.value)\r\n      \r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <div className=\"container\" style={{ color :props.mode === 'light' ? 'black': ' white' }}>\r\n\r\n                <h3 >{props.heading} </h3>\r\n                \r\n                <div className=\"mb-3\">\r\n                    <label htmlFor=\"myBox\" className=\"form-label\">Example textarea</label>\r\n                    {/* type korar jonne onChange use korte hobe.. r textarea value type ar sathe sathe change korar jonne textarea vitore value obossoi state hote hobe. jemon akhane --- value= {text}   */}\r\n                    <textarea className=\"form-control\" \r\n                              value= {text} \r\n                              onChange={handleOnChange} \r\n                              style={{backgroundColor :props.mode === 'light' ? 'white': ' gray', color :props.mode === 'light' ? 'black': ' white' }} \r\n                              id=\"myBox\" \r\n                              rows=\"13\">\r\n\r\n                    </textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary m-2\" onClick={handleUpClick}> convert to uppercase</button>\r\n                <button className=\"btn btn-primary m-2\" onClick={handleLowClick}> convert to lowercase</button>\r\n                <button className=\"btn btn-outline-primary m-2\" onClick={handleCapFirstLetterClick}> Cpitalized first letter</button>\r\n                <button className=\"btn btn-outline-primary m-2\" onClick={handleCapClick}> Cpitalized</button>\r\n                <button className=\"btn btn-outline-primary m-2\" onClick={COPYIT}> COPY IT</button>\r\n                <button className=\"btn btn-outline-primary m-2\" onClick={clickUniqueWords}> Unique Words</button>\r\n                <button className=\"btn btn-outline-primary m-2\" onClick={handleExtraSpaces}>Remove Spaces</button>\r\n                <button className=\"btn btn-outline-primary m-2\" onClick={handleClearText}>Clear </button>\r\n                \r\n            </div>\r\n            <div className=\"container my-3\" style={{ color :props.mode === 'light' ? 'black': ' white' }}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").length} words {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n                <h2> preview </h2>\r\n                <pre>{text.length>0 ? text : \"enter somthing to Preview it here\"}</pre>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    ///capitalize\r\n\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n\r\n        /// props.alert && ata jodi valuable hoi ta hole e return ar maje oi sob run hobe noile . r  props.alert && jodi null , undefine hoi ta hole run hobe na div \r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n// import About from './component/About';\nimport Navbar from './component/navbar';\nimport TextForm from './component/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './component/Alert';\n// import {\n//   BrowserRouter,\n//    Routes,\n//   Navigate,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\") //wether dark mode eneble or not\n  const [modeText, setModeText] = useState(\"Enablep\")\n  const [alert, setAlert] = useState(null)\n\n\n  const showAlert = (message , type) =>{\n\n    setAlert({\n      msg : message,\n      type : type\n    })\n\n    setTimeout(() => {\n\n      setAlert(null)\n      \n    }, 1500);\n  }\n\n\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode(\"dark\")\n      setModeText(\"disable \")\n      document.body.style.backgroundColor = \"#042743\"\n      showAlert(\"Dark mode has been enabled\" , \"success\")\n      // document.title = 'TextUtils Dark Mode';\n\n\n      // atar madhomer file ar uporer nam 2 sec por code onujai e cng hote thakbe..kinba 3 sec por code onujai e cng hote thakbe..\n\n      // setInterval(() => {\n      //   document.title = 'TextUtils IS AMEZING Mode';\n      // }, 2000);\n\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 4000);\n\n    }\n\n    else{\n      setMode(\"light\")\n      setModeText(\"Enable \")\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"light mode has been enabled\" , \"primary\")\n      document.title = 'TextUtils - Light Mode'\n      \n    }\n  }\n  \n\n  return (\n    <>\n        <Navbar title=\"CreatePropsTitle\" aboutText=\"about_text\" mode = {mode} modeText={modeText} toggleMode={toggleMode}  />\n          <Alert alert = {alert}/>\n          <div className=\"container\">\n                <TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert = {showAlert}/>\n         </div>\n    </>\n    \n    // <BrowserRouter>\n  \n    //       <Navbar title=\"CreatePropsTitle\" aboutText=\"about_text\" mode = {mode} modeText={modeText} toggleMode={toggleMode}  />\n\n    //       <Alert alert = {alert}/>\n\n    //       <div className=\"container\">\n    //         {/* <Routes>\n    //             <Route path=\"/about\" element={  <About />}>\n                \n    //             </Route>\n              \n    //             <Route path=\"/\" element={<TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert = {showAlert}/>}>\n                  \n    //             </Route>\n                \n    //         </Routes> */}\n    //         <Routes>\n\n    //           <Route path=\"/\" element ={<TextForm heading=\"Enter the text to analyze below\" mode={mode} showAlert = {showAlert}/>}/>\n    //           <Route path=\"/\" element={<Navigate to=\"/textForm\"/>}/> \n    //             <Route path=\"/about\" element ={<About/>}/>\n       \n    //        </Routes>\n     \n    //       </div>\n\n    // </BrowserRouter>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}